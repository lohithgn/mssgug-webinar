// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Contoso.Api.Models;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.Extensions.Logging;

namespace Contoso.Api
{
    public class TodosApi
    {
        private ILogger<TodosApi> _logger;

        /// <summary> Initializes a new instance of TodosApi. </summary>
        /// <param name="logger"> Class logger. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="logger"/> is null. </exception>
        public TodosApi(ILogger<TodosApi> logger)
        {
            if (logger == null)
            {
                throw new ArgumentNullException(nameof(logger));
            }

            _logger = logger;
        }

        /// <summary> Get all ToDos for a user. </summary>
        /// <param name="req"> Raw HTTP Request. </param>
        /// <param name="cancellationToken"> The cancellation token provided on Function shutdown. </param>
        [FunctionName("ListTodosAsync_get")]
        public async Task<IActionResult> ListTodosAsync([HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = "todos")] HttpRequest req, CancellationToken cancellationToken = default)
        {
            _logger.LogInformation("HTTP trigger function processed a request.");

            // TODO: Handle Documented Responses.
            // Spec Defines: HTTP 200

            throw new NotImplementedException();
        }

        /// <summary> Add a new ToDo. </summary>
        /// <param name="req"> Raw HTTP Request. </param>
        /// <param name="body"> ToDo object that needs to be added. </param>
        /// <param name="cancellationToken"> The cancellation token provided on Function shutdown. </param>
        [FunctionName("CreateTodoAsync_post")]
        public async Task<IActionResult> CreateTodoAsync(HttpRequest req, [HttpTrigger(AuthorizationLevel.Anonymous, "post", Route = "todos")] ToDo body = null, CancellationToken cancellationToken = default)
        {
            _logger.LogInformation("HTTP trigger function processed a request.");

            // TODO: Handle Documented Responses.
            // Spec Defines: HTTP 201
            // Spec Defines: HTTP 405

            throw new NotImplementedException();
        }

        /// <summary> Get an existing ToDo. </summary>
        /// <param name="req"> Raw HTTP Request. </param>
        /// <param name="todoId"> ID of ToDo to return. </param>
        /// <param name="cancellationToken"> The cancellation token provided on Function shutdown. </param>
        [FunctionName("GetTodoAsync_get")]
        public async Task<IActionResult> GetTodoAsync([HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = "todos/{todoId}")] HttpRequest req, long todoId, CancellationToken cancellationToken = default)
        {
            _logger.LogInformation("HTTP trigger function processed a request.");

            // TODO: Handle Documented Responses.
            // Spec Defines: HTTP 200
            // Spec Defines: HTTP 400
            // Spec Defines: HTTP 404

            throw new NotImplementedException();
        }

        /// <summary> Update an existing ToDo. </summary>
        /// <param name="todoId"> ID of ToDo to return. </param>
        /// <param name="req"> Raw HTTP Request. </param>
        /// <param name="body"> ToDo object that needs to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token provided on Function shutdown. </param>
        [FunctionName("UpdateTodoAsync_post")]
        public async Task<IActionResult> UpdateTodoAsync(long todoId, HttpRequest req, [HttpTrigger(AuthorizationLevel.Anonymous, "post", Route = "todos/{todoId}")] ToDo body = null, CancellationToken cancellationToken = default)
        {
            _logger.LogInformation("HTTP trigger function processed a request.");

            // TODO: Handle Documented Responses.
            // Spec Defines: HTTP 200
            // Spec Defines: HTTP 400
            // Spec Defines: HTTP 405

            throw new NotImplementedException();
        }

        /// <summary> Delete an existing ToDo. </summary>
        /// <param name="req"> Raw HTTP Request. </param>
        /// <param name="todoId"> ID of ToDo to delete. </param>
        /// <param name="cancellationToken"> The cancellation token provided on Function shutdown. </param>
        [FunctionName("DeleteTodoAsync_delete")]
        public async Task<IActionResult> DeleteTodoAsync([HttpTrigger(AuthorizationLevel.Anonymous, "delete", Route = "todos/{todoId}")] HttpRequest req, long todoId, CancellationToken cancellationToken = default)
        {
            _logger.LogInformation("HTTP trigger function processed a request.");

            // TODO: Handle Documented Responses.
            // Spec Defines: HTTP 200
            // Spec Defines: HTTP 400
            // Spec Defines: HTTP 404

            throw new NotImplementedException();
        }
    }
}
